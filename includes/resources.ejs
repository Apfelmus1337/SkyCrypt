    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no">
    <meta property="og:site_name" content="SkyCrypt">
    <meta property="og:type" content="object">
    <link rel="sitemap" href="/sitemap.xml">
    <link rel="manifest" href="/manifest.webmanifest">
    <meta name="theme-color" content="#282828">
    <meta name="apple-mobile-web-app-title" content="SkyCrypt">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <link rel="apple-touch-icon" sizes="180x180" href="/resources/img/app-icons/square-180.png">
    <link rel="apple-touch-icon" sizes="512x512" href="/resources/img/app-icons/square-512.png">
    <noscript><link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Montserrat:400,500,600,700&display=swap"></noscript>
    <link rel="stylesheet" href="/resources/css/index.css?v135">
    <noscript><link rel="stylesheet" href="/resources/css/inventory.css?v13"></noscript>

    <script>
        const stylesheets = [
            "/resources/css/inventory.css?v13",
            "https://fonts.googleapis.com/css?family=Montserrat:400,500,600,700&display=swap"
        ];

        stylesheets.forEach(function(sheet){
            const link = document.createElement('link')
            link.href = sheet;
            link.rel = 'stylesheet'
            document.head.appendChild(link);
        });
    </script>

    <script>
        let extra = <%- JSON.stringify(extra) %>;

        function formatNumber(number, floor, rounding = 10) {
            const roundFunc = floor ? Math.floor : Math.ceil;
            if (number < 1000)
                return Math.floor(number);
            else if (number < 10000)
                return (roundFunc(number / 1000 * rounding) / rounding).toFixed(rounding.toString().length - 1) + 'K';
            else if (number < 1000000)
                return roundFunc(number / 1000) + 'K';
            else if (number < 1000000000)
                return (roundFunc(number / 1000 / 1000 * rounding) / rounding).toFixed(rounding.toString().length - 1) + 'M';
            else
                return (roundFunc(number / 1000 / 1000 / 1000 * rounding * 10) / (rounding * 10)).toFixed(rounding.toString().length) + 'B';
        }

        document.addEventListener('DOMContentLoaded', function(){
            const searchUser = document.querySelector('#inp_search_user');

            function updateUserTarget(e){
                const playerName = searchUser.value;

                if(window.hasOwnProperty("targetUsername") && playerName)
                    targetUsername.value = playerName;

                if(e.keyCode == 13 && playerName.trim().length > 0)
                    document.location = '/stats/' + playerName;
                else
                    document.querySelector('#btn_search_user').href = '/stats/' + playerName;

                if(playerName.trim().length == 0)
                    document.querySelector('#btn_search_user').href = '#';
            }

            searchUser.addEventListener('keyup', updateUserTarget);
            searchUser.addEventListener('change', updateUserTarget);
        });
    </script>

    <script>
        if (!localStorage.getItem('currentTheme') || !extra.themes[localStorage.getItem('currentTheme')])
            localStorage.setItem('currentTheme', 'default');

        if (localStorage.getItem('currentTheme') != 'default')
            loadTheme(localStorage.getItem('currentTheme'));

        function convertHex(code) {
            const hex = code.substring(1, 7);
            return `${parseInt(hex.substring(0, 2), 16)}, ${parseInt(hex.substring(2, 4), 16)}, ${parseInt(hex.substring(4, 6), 16)}`;
        }

        function loadTheme(currentTheme) {
            if (!extra.themes[currentTheme])
                return console.error(`${currentTheme} isn't a valid theme.`);

            const theme = extra.themes[currentTheme];

            let colors = theme.colors;
            const element = document.documentElement;

            for (color in colors) {
                let value = colors[color];

                switch (color) {
                    case 'icon':
                    case 'line':
                    case 'link': 
                        element.style.setProperty(`--${color}-rgb`, convertHex(value));
                    default: 
                        element.style.setProperty(`--${color}-hex`, value);
                }
            }

            for (img in theme.images) {
                element.style.setProperty(`--${img}`, `url(${theme.images[img]})`);
            }
            
            for (key in theme.backgrounds) {
                const background = theme.backgrounds[key]
                let value
                switch (background.type) {
                    case "color":
                        value = background.color
                        break
                    case "stripes":
                        value = `repeating-linear-gradient( ${background.angle}, ${
                            background.colors.flatMap((color, i) => {
                                return [
                                    `${color} ${i * background.width}px`,
                                    `${color} ${(i + 1) * background.width}px`
                                ]
                            }).join(', ')
                        })`
                        break

                }
                element.style.setProperty(`--${key}`, value);             
            }

            console.log(`Loaded theme: ${currentTheme}`);
        }
    </script>
